#!/usr/bin/env node
var child_process = require('child_process');
var fs = require('fs');
var path = require('path');

var coffee = require('coffee-script');
var coffeeify = require('caching-coffeeify');
var convert = require('convert-source-map');
var glob = require('glob');
var q = require('kew');
var sourceMap = require('source-map');
var UglifyJS = require('uglify-js');
var UglifyCSS = require('uglifycss');
var umd = require('umd');
var umd = require('umd');

var annotator = require('../');
var browserify = annotator.browserify;
var include = annotator.include;
var prepend = annotator.prepend;

var SourceMapConsumer = sourceMap.SourceMapConsumer;
var SourceMapGenerator = sourceMap.SourceMapGenerator;
var SourceNode = sourceMap.SourceNode;


// A global map of libraries to their hashed contents.
// As browserify processes files, we write them to the output directory.
// Since many bundles share files, we use this to write them only once as
// they change.
var libs = {};


// Uglify emits ugly warnings for source maps it can't resolve.
// It cannot map our license preamble or the browserify wrappers.
// It feels ugly, but let's just disable these.
UglifyJS.AST_Node.warn_function = null;


// Uglify a source with the supplied source map generator.
// Returns {code::String, map::SourceMapGenerator}
function uglify(src, srcMap) {
  var comment = '//@ sourceMappingURL=';
  var inSrcMap = convert.fromJSON(srcMap.toString());
  var filename = inSrcMap.getProperty('file').replace('.js', '.min.js');

  // Parse the result with UglifyJS
  var ast = UglifyJS.parse(src, {filename: inSrcMap.getProperty('file')});

  // Set up the UglifyJS compression pipeline
  srcMap = UglifyJS.SourceMap({
    file: filename,
    orig: srcMap.toString(),
    root: inSrcMap.getProperty('sourceRoot')
  });
  src = UglifyJS.OutputStream({
    comments: /Copyright/g,
    source_map: srcMap
  });

  // Perform the minification
  ast.figure_out_scope();
  ast = ast.transform(UglifyJS.Compressor());
  ast.figure_out_scope();
  ast.compute_char_frequency();
  ast.mangle_names();
  ast.print(src);

  // Read the source and source map from the uglify pipeline
  src = src.get() + '\n' + comment + filename + '.map';
  srcMap = convert.fromJSON(srcMap.toString());

  // Add all the sources and inline them into the source map
  // UglifyJS drops all but the first source file
  srcMap.setProperty('sources', inSrcMap.getProperty('sources'));
  srcMap.setProperty('sourcesContent', inSrcMap.getProperty('sourcesContent'));

  srcMap = SourceMapGenerator.fromSourceMap(
    new SourceMapConsumer(srcMap.toObject())
  );

  return {code: src, map: srcMap};
}


// The core Annotator library
exports.core = browserify({extensions: ['.coffee']})
.external('jquery')
.require('./src/annotator', {expose: 'annotator', entry: true})
.transform(coffeeify)
;


// The plugin bundles
exports.plugin = glob.sync('./src/plugin/*.coffee').reduce(
  function (plugin, source) {
    var name = source.replace('.coffee', '.js').replace('./src', '/lib');
    var expose = name.replace('.js', '').replace('/lib', 'annotator');
    plugin[name] = include({extensions: ['.coffee']})
    .require(source, {expose: expose})
    .transform(coffeeify)
    ;
    return plugin;
  },
  {
});


// Test files
exports.test = {};
glob.sync('./test/**/*.coffee').forEach(function (f) {
  var name = f.replace('.coffee', '.js').replace('./test', '/test');
  exports.test[name] = browserify({extensions: ['.coffee']})
  .transform(coffeeify)
  ;

  if (f == './test/helpers.coffee') {
    exports.test[name].ignore('jquery')
    exports.test[name].require('./src/annotator', {expose: 'annotator'});
    exports.test[name].require('./test/helpers', {expose: 'helpers'});
  } else {
    exports.test[name].add(f);
    exports.test[name].ignore('jquery')
    exports.test[name].external('annotator');
    exports.test[name].external('helpers');
  }
});


// Package the bundles when called as the main script
if (require.main === module) {
  child_process.exec('./tools/preamble', function (err, preambleSrc) {
    if (err) throw new Error(err);

    var preamble = coffee.compile(preambleSrc, {bare: true}).trim() + '\n';

    var write = function(filename, src, srcMap) {
      // Make the source file paths relative
      srcMap.sources = srcMap.sources.map(function (src) {
        return path.relative(process.cwd(), src);
      });
      srcMap.file = path.basename(filename);

      var consumer = new SourceMapConsumer(srcMap);

      // Output the source with the preamble appended
      var output = prepend(preamble, src, consumer);
      console.log('Writing ', filename);
      fs.writeFileSync(filename, [
        output.code,
        convert.fromJSON(output.map.toString()).toComment(),
        ';'
      ].join('\n'));

      // Compress the source
      var compressed = uglify(output.code, output.map);

      // Write the minified source
      filename = filename.replace('.js', '.min.js');
      console.log('Writing ', filename);
      fs.writeFileSync(filename, compressed.code);

      // Write the minified source map
      filename += '.map';
      console.log('Writing ', filename);
      fs.writeFileSync(filename, compressed.map.toString());

      return SourceNode.fromStringWithSourceMap(src, consumer);
    }

    var pack = function(b, filename, options) {
      var promise = q.defer();

      b.bundle(options, function (err, result) {
        if (err) return promise.reject(err);
        var src = convert.removeComments(result).slice(0, -3);
        var srcMap = convert.fromSource(result).toObject();
        promise.resolve(write(filename, src, srcMap));
      });

      return promise;
    }

    var core = pack(exports.core, 'pkg/annotator.js', {
      debug: true,
      standalone: 'Annotator'
    });

    var full = Object.keys(exports.plugin).reduce(function (full, name) {
      var filename = 'pkg/annotator.' + path.basename(name);
      var plugin = pack(exports.plugin[name], filename, {
        debug: true,
        standalone: 'Annotator'
      });
      return full.concat([plugin]);
    }, [core]);

    q.all(full).then(function (nodes) {
      var filename = 'pkg/annotator-full.js';
      var full = nodes.reduce(function (full, node) {
        full.add(node);
        return full;
      }).toStringWithSourceMap({file: path.basename(filename)});
      var srcMap = convert.fromJSON(full.map.toString()).toObject();
      var output = write(filename, full.code, srcMap);
    })

    var css = fs.createWriteStream('pkg/annotator.min.css');
    var dataURI = child_process.spawn('./tools/data_uri_ify');

    fs.createReadStream('./css/annotator.css').pipe(dataURI.stdin)

    var cssInput = '';
    dataURI.stdout.on('data', function (data) {cssInput += data});
    dataURI.stdout.on('end', function() {
      var cssOutput = UglifyCSS.processString(cssInput);
      console.log('Writing ', 'pkg/annotator.min.css');
      fs.writeFileSync('pkg/annotator.min.css', preamble + cssOutput);
    });
  });
}
